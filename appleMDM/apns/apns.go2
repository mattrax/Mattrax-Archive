/**
 * Mattrax: An Open Source Device Management System
 * File Description: This is the Code For Interfacing with APNS.
 * Protcol Documentation: https://developer.apple.com/library/archive/documentation/Miscellaneous/Reference/MobileDeviceManagementProtocolRef/3-MDM_Protocol/MDM_Protocol.html
 * Copyright (C) 2018-2018 Oscar Beaumont <oscartbeaumont@gmail.com>
 */

package apns

import (
	"encoding/json"
	//"time"
	//"encoding/hex"
	//"crypto/tls"
	"os"
	"sync"

	//External Deps
	"github.com/RobotsAndPencils/buford/certificate" // Apple Push Notification Service -> Certificates
	"github.com/RobotsAndPencils/buford/payload"     // Apple Push Notification Service -> Payloads
	"github.com/RobotsAndPencils/buford/push"        // Apple Push Notification Service -> Push

	// Internal Functions
	mlg "github.com/mattrax/Mattrax/internal/logging"       //Mattrax Logging
	mcf "github.com/mattrax/Mattrax/internal/configuration" //Mattrax Configuration
	//errors "github.com/mattrax/Mattrax/internal/errors" // Mattrax Error Handling

	// Internal Modules
	structs "github.com/mattrax/Mattrax/appleMDM/structs" // Apple MDM Structs/Functions
)

var ( // Get The Internal State
	log = mlg.GetLogger()
	config = mcf.GetConfig()
	//cert tls.Certificate // The APNS Certificate
	queue *push.Queue // The APNS Notification Queue
)


//TODO
func init() {



	var host string
	if config.APNSProduction {
		host = push.Production
	} else {
		host = push.Development
	}
	var workers uint = 20



	// load a certificate and use it to connect to the APN service:
	cert, err := certificate.Load(config.APNScert, config.APNSpass)
	exitOnError(err)

	client, err := push.NewClient(cert)
	exitOnError(err)
	service := push.NewService(client, host)
	queue = push.NewQueue(service, workers)
	var wg sync.WaitGroup

	// process responses
	// NOTE: Responses may be received in any order.
	go func() {
		count := 1
		for resp := range queue.Responses {
			if resp.Err != nil {
				log.Debug("(%d) device: %s, error: %v", count, resp.DeviceToken, resp.Err)
			} else {
				log.Fatal("(%d) device: %s, apns-id: %s", count, resp.DeviceToken, resp.ID)
			}
			count++
			wg.Done()
		}
	}()

	p := payload.MDM{
		Token: "5F4556D5-2DBA-4998-B74A-471312189138",
	}
	b, err := json.Marshal(p)
	if err != nil {
		log.Fatal(err)
		return
	}
	wg.Add(1)
	queue.Push("877914b242e969ee82abf93537b16db3a2441ae4", nil, b)
	wg.Wait()

	// prepare notification(s) to send
	/*p := payload.APS{
		Alert: payload.Alert{Body: "Hello HTTP/2"},
	}
	b, err := json.Marshal(p)
	exitOnError(err)

	var number = 10

	// send notifications:
	start := time.Now()
	for i := 0; i < number; i++ {
		wg.Add(1)
		queue.Push("877914b242e969ee82abf93537b16db3a2441ae4", nil, b)
	}

	// done sending notifications, wait for all responses and shutdown:
	wg.Wait()
	//
	elapsed := time.Since(start)

	log.Printf("Time for %d responses: %s (%s ea.)", number, elapsed, elapsed/time.Duration(number))
	*/

	log.Info("Apple Push Notification Service Has Connected")

	// TODO: Shutdown Cleanup
	queue.Close()
}




//TODO
func DeviceUpdate(_device structs.Device) error { //Replace Bool With Error
	log.Debug("APNS Update Sent To Device " + _device.UDID)



	p := payload.MDM{
		Token: _device.DeviceTokens.PushMagic,
	}
	b, err := json.Marshal(p)
	if err != nil {
		return err
	}
	queue.Push(_device.UDID, nil, b)


	return nil
	//return errors.New("YOLO")
}

func exitOnError(err error) { //TEMP
	if err != nil {
		log.Error(err)
		os.Exit(1)
	}
}
